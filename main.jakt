import parser { Parser, ParsedCircuit }
import compiler { CompiledCircuit }
import logic { LogicalState }

function main(args: [String]) throws -> c_int {
    let name = args[1]
    mut file = File::open_for_reading(name)
    let contents = file.read_all()
    mut builder = StringBuilder::create()
    mut split_contents: [String] = []
    mut in_comment = false
    for c in contents.iterator() {
        if in_comment {
            if c == b'\n' {
                in_comment = false
            } else {
                continue
            }
        }
        match c {
            b'*' | b'\n' | b' ' | b'\t' | b'\v' | b'\f' | b'\r' => {
                if c == b'*' {
                    in_comment = true
                }
                if builder.length() == 0 {
                    continue
                }

                split_contents.push(builder.to_string())
                builder.clear()
            }
            else => {
                builder.append(c)
            }
        }
    }

    if builder.length() > 0 {
        split_contents.push(builder.to_string())
    }

    let circuit = Parser::parse(name, stream: split_contents)
    println("{}", circuit)

    mut compiled_circuit = CompiledCircuit::compile(circuit)
    compiled_circuit.run(inputs: [
        0uz: LogicalState::Low
        1uz: LogicalState::Low
        3uz: LogicalState::Low
    ])
    for net in compiled_circuit.state.netlist.iterator() {
        println("{} = {}", net.0, net.1.current)
    }

    return 0
}