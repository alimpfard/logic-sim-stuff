import parser { Parser, ParsedCircuit }
import compiler { CompiledCircuit }
import logic { LogicalState }

function main(args: [String]) throws -> c_int {
    if args.size() < 2 {
        eprintln("Usage: {} [--list-inputs] [--entire-netlist] <input.isc> {net=value}*", args[0])
        return 1
    }

    let should_list_inputs = args[1] == "--list-inputs"
    mut arg_index = 1
    if should_list_inputs {
        arg_index += 1
    }

    let should_print_entire_netlist = args[arg_index] == "--entire-netlist"
    if should_print_entire_netlist {
        arg_index += 1
    }

    mut default_input_init: String? = None
    if args[arg_index] == "--init-all-inputs" {
        default_input_init = args[++arg_index]
        arg_index += 1
    }

    mut generate_table = false
    mut full_table = false
    if args[arg_index] == "--generate-table" {
        generate_table = true
        arg_index += 1
        if args[arg_index] == "full" {
            arg_index += 1
            full_table = true
        }
    }

    let name = args[arg_index]
    mut file = File::open_for_reading(name)
    let contents = file.read_all()
    mut builder = StringBuilder::create()
    mut split_contents: [String] = []
    mut in_comment = false
    for c in contents.iterator() {
        if in_comment {
            if c == b'\n' {
                in_comment = false
            } else {
                continue
            }
        }
        match c {
            b'*' | b'\n' | b' ' | b'\t' | b'\v' | b'\f' | b'\r' => {
                if c == b'*' {
                    in_comment = true
                }
                if builder.length() == 0 {
                    continue
                }

                split_contents.push(builder.to_string())
                builder.clear()
            }
            else => {
                builder.append(c)
            }
        }
    }

    if builder.length() > 0 {
        split_contents.push(builder.to_string())
    }

    let circuit = Parser::parse(name, stream: split_contents)
    // println("{}", circuit)

    // for x in circuit.wires.iterator() {
    //     println("{:0>2} wire {}: {} -({})-> {}", circuit.index_mappings[x.index], x.name, x.fan_ins, x.kind, x.fan_outs)
    // }

    if should_list_inputs {
        for input in circuit.inputs.iterator() {
            println("- {}", circuit.wires[circuit.inverse_index_mappings[input]].name)
        }
        return 0
    }

    mut compiled_circuit = CompiledCircuit::compile(circuit)

    if generate_table {
        let number_of_inputs = circuit.inputs.size()
        mut state = [LogicalState::Low; number_of_inputs]
        mut i = 0

        // Generate all possible inputs of [Low, High, X, Z]
        mut multiplier = 1uz
        if full_table {
            multiplier = 2uz
        }

        mut inputs: [usize:LogicalState] = [:]
        if multiplier * number_of_inputs > 64 {
            eprintln("Too many inputs for table generation")
            return 1
        }

        mut input_indices: {usize} = {}
        for i in circuit.inputs.iterator() {
            input_indices.add(circuit.inverse_index_mappings[i])
        }

        mut output_indices: {usize} = {}
        for i in circuit.outputs.iterator() {
            output_indices.add(circuit.inverse_index_mappings[i])
        }

        print("| Index / Values ")
        mut ii = 0uz
        for net in compiled_circuit.state.netlist.iterator() {
            mut s = "| "
            let current = ii++
            if input_indices.contains(current) {
                s += "[in] "
            } else if output_indices.contains(current) {
                s += "[out] "
            }

            print("{}{} ", s, net.0)
        }
        println("|")

        print("| :- ")
        for net in compiled_circuit.state.netlist.iterator() {
            print("| -- ")
        }
        println("|")

        for i in 0u64..(1u64 << (multiplier * number_of_inputs)) {
            mut j = 0
            for k in 0..number_of_inputs {
                let two_bits = match full_table {
                    true => (i >> (2uz * k)) & 3u64
                    else => (i >> (1uz * k)) & 1u64
                }
                inputs[circuit.inverse_index_mappings[circuit.inputs[k]]] = match two_bits {
                    0u64 => LogicalState::Low
                    1u64 => LogicalState::High
                    2u64 => LogicalState::X
                    3u64 => LogicalState::Z
                    else => LogicalState::Low
                }
            }

            compiled_circuit.run(inputs)
            print("| {} ", i)

            for net in compiled_circuit.state.netlist.iterator() {
                print("| `{}` ", net.1.current.name())
            }

            println("|")
        }
        return 0
    }

    // for x in compiled_circuit.state.event_registry.events.iterator() {
    //     mut targets: [String] = []
    //     for y in x.1.targets.iterator() {
    //         targets.push(compiled_circuit.circuit.wires[y].name)
    //     }
    //     println("{:0>2} event {}: {}", compiled_circuit.circuit.wire_by_name(name: x.0), x.0, targets)
    // }

    mut inputs: [usize:LogicalState] = [:]
    if default_input_init.has_value() {
        for input in circuit.inputs.iterator() {
            inputs[circuit.inverse_index_mappings[input]] = LogicalState::from_string(name: default_input_init!)
        }
    }

    mut i = 0
    for arg in args.iterator() {
        if i < arg_index + 1 {
            i += 1
            continue
        }

        i += 1
        mut split_arg = arg.split('=')
        if split_arg.size() != 2 {
            eprintln("Invalid argument: {}", arg)
            return 1
        }
        let wire_name = split_arg[0]
        let wire_value = split_arg[1]

        let wire_index = compiled_circuit.circuit.wire_by_name(name: wire_name)
        let wire_id = compiled_circuit.circuit.inverse_index_mappings[wire_index]
        let wire_state = LogicalState::from_string(wire_value)
        inputs.set(wire_id, wire_state)
    }

    compiled_circuit.run(inputs)

    if should_print_entire_netlist {
        println("Entire netlist:")
        for net in compiled_circuit.state.netlist.iterator() {
            println("- {} = {}", net.0, net.1.current)
        }
    }

    println("Output values:")
    for output in compiled_circuit.circuit.outputs.iterator() {
        let wire = compiled_circuit.circuit.wires[compiled_circuit.circuit.inverse_index_mappings[output]]
        println("- {} = {}", wire.name, compiled_circuit.state.netlist[wire.name].current)
    }

    return 0
}