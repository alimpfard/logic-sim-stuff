enum LogicalState {
    Low
    High
    Z
    X
    D
    DNeg

    function equals(this, anon other: LogicalState) -> bool {
        return match this {
            Low => match other {
                Low => true
                else => false
            }
            High => match other {
                High => true
                else => false
            }
            X => match other {
                X => true
                else => false
            }
            Z => match other {
                Z => true
                else => false
            }
            D => match other {
                D => true
                else => false
            }
            DNeg => match other {
                DNeg => true
                else => false
            }
        }
    }

    function is_d(this) => .equals(LogicalState::D) or .equals(LogicalState::DNeg)

    function from_string(anon s: String) throws -> LogicalState {
        return match s {
            "0" | "Low" | "low" | "l"  => LogicalState::Low
            "1" | "High" | "high" | "h" => LogicalState::High
            "X" | "x" => LogicalState::X
            "Z" | "z" => LogicalState::Z
            "D" | "d" => LogicalState::D
            "DNeg" | "dneg" | "D-1" | "d-1" => LogicalState::DNeg
            else => {
                throw Error::from_errno(22)
                // FIXME: This is useless
                yield LogicalState::Z
            }
        }
    }

    function name(this) throws -> String {
        return match this {
            Low => "Low"
            High => "High"
            X => "X"
            Z => "Z"
            D => "D"
            DNeg => "DNeg"
        }
    }
}

function logical_and(anon a: LogicalState, anon b: LogicalState) -> LogicalState => match a {
    Low => LogicalState::Low
    High => b
    Z => match b {
        Low => LogicalState::Low
        High => LogicalState::Z
        Z => LogicalState::Z
        X => LogicalState::X
        D => LogicalState::D
        DNeg => LogicalState::DNeg
    }
    X => match b {
        Low => LogicalState::Low
        else => LogicalState::X
    }
    D => match b {
        DNeg | Low => LogicalState::Low
        High | D => LogicalState::D
        else => b
    }
    DNeg => match b {
        DNeg | High => LogicalState::DNeg
        Low | D => LogicalState::Low
        else => b
    }
}

function logical_nand(anon a: LogicalState, anon b: LogicalState) -> LogicalState => logical_not(logical_and(a, b))

function logical_nor(anon a: LogicalState, anon b: LogicalState) -> LogicalState => logical_not(logical_or(a, b))

function logical_not(anon a: LogicalState) -> LogicalState => match a {
    Low => LogicalState::High
    High => LogicalState::Low
    Z => LogicalState::Z
    X => LogicalState::X
    D => LogicalState::DNeg
    DNeg => LogicalState::D
}

function logical_or(anon a: LogicalState, anon b: LogicalState) -> LogicalState => match a {
    Low => b
    High => LogicalState::High
    Z => match b {
        High => LogicalState::High
        else => LogicalState::Z
    }
    X => match b {
        Low => LogicalState::X
        High => LogicalState::High
        Z => LogicalState::Z
        X => LogicalState::X
        D => LogicalState::D
        DNeg => LogicalState::DNeg
    }
    D => match b {
        DNeg | High => LogicalState::High
        Low | D => LogicalState::D
        else => b
    }
    DNeg => match b {
        DNeg | Low => LogicalState::DNeg
        High | D => LogicalState::High
        else => b
    }
}

function logical_xnor(anon a: LogicalState, anon b: LogicalState) -> LogicalState => logical_not(logical_xor(a, b))

function logical_xor(anon a: LogicalState, anon b: LogicalState) -> LogicalState => logical_and(logical_or(a, b), logical_or(logical_not(a), logical_not(b)))